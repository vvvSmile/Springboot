/***
* 只是用来记录文本笔记：
* https://ke.qq.com/course/179440
***/

##############################################
#11 springboot的配置profiles详解
server.port=8080
spring.profiles.active=dev
#note: just in case of no default application.properties file
# 1. Edit Run/Debug configuration-->VM Option: -Dspring.profiles.active=prod
# 2. Run command:
#       a.Generate package:  Maven--> LifeCycle-->package
#       b.cmd: D:\gitRepo\Springboot\Springboot\MyMevanProj\target>java -jar MyMevanProj-1.0-SNAPSHOT.jar --spring.profiles.active=dev
#       c.Check the server.port if correct
#       d:Double check: ctrl+c to stop the running package and run D:\gitRepo\Springboot\Springboot\MyMevanProj\target>java -jar MyMevanProj-1.0-SNAPSHOT.jar --spring.profiles.active=prod

# yaml file: the same as application.properties file

##############################################
12 springboot配置文件加载位置和优先级
    config 1：与src同级别的config文件夹中的配置文件
    config 2：直接在项目下面的配置文件--指的是配置文件跟src同一个文件夹
    config 3：src/main/resources/config 下的配置文件
    config 4：src/main/resources 下的配置文件

   配置相同，则就近原则。其优先级为：1> 2 > 3 > 4
   配置不同，则相对补充，互补配置。

   推荐在resources文件夹中使用配置文件，但是还是得根据项目的需要进行调整。
   resources文件夹外中的配置文件打包的时候会丢失。。。。所以不推荐使用config 1 和config 2

##############################################
13 springboot外部配置文件加载
    package打包好之后，依然想使用外部的配置文件方法： cmd启动程序加参数指定配置文件：
    D:\gitRepo\Springboot\Springboot\MyMevanProj\target>java -jar MyMevanProj-1.0-SNAPSHOT.jar --spring.config.location=C:/application.properties

    注： cmd启动加载外部配置文件不会进行相对补充。如果需要的话，还可以通过其他的参数进行配置，如：
    D:\gitRepo\Springboot\Springboot\MyMevanProj\target>java -jar MyMevanProj-1.0-SNAPSHOT.jar --spring.config.location=C:/application.properties --server.servlet.context-path=/tx

    除了cmd启动程序加参数指定配置文件之外，还可以通过cmd加参数的方式加载外部的其他的文件。如
        a. 来自java.comp/env的JNDI属性
        b. Java系统属性（System.getProperties()）
        c. 操作系统环境变量。 等等
    多个配置用空格分开； --配置项=值


##############################################
14 springboot自动配置原理上
15 springboot自动配置原理中
16 springboot自动配置原理下

    自动配置基本原理：
    @SpringBootApplication --> @EnableAutoConfiguration --> @Import({AutoConfigurationImportSelector,class}) 自动配置导入选择器
    --> public Sring[] selectImports 选择方法 --> protected List<String> getCondidateConfigurations 获取候选配置方法
    --> loadFactoryNames 方法 --> loadSpringFactories 方法 --> 从文件“META-INF/spring.factories”文件中获取 urls,这个文件包含了所有自动配置类-全部以AutoConfiguration结尾

    从urls中找一个配置类分析 HttpEncodingAutoConfiguration --> @EnableConfigurationProperties({HttpEncodingProperties.class}) 启用配置属性--这样才能允许我们自定义配置，比如server.port=8081
    --> @ConfigurationProperties(prefix="spring.http.encoding") 通过这个prefix前缀，我们在自定义配置（如server.port=8081）的时候IDEA就能够给我们只能提示。//从配置文件中获取指定的值和bean的属性进行绑定
    因为IDEA会自动通过这个前缀自动获取属性，以及智能提示，通过智能提示，我们可以判断哪些属性可以自定义配置。如：
    server.port=8081
    spring.http.encoding.charset=UTF-8  -->编码模块的配置

    在取一个自动配置类：MultipleAutoConfiguration ， @EnableConfigurationProperties({MultipleAutoConfiguration.class}) 启用配置属性 --> MultipleProperties 包括一个前缀，以及文件上传的一些属性配置
    spring.servlet.multipart.max-file-size=10M    --> 文件上传的配置

    其他自动配置类也是类似。

    配置类（HttpEncodingAutoConfiguration）的其他注解说明：
    a. @Configuration //表示这是一个配置类，以前编写的配置文件一样，也可以给容器中添加组件
    b. @EnableConfigurationProperties({HttpEncodingProperties.class}) //启动指定类的ConfigurationProperties功能；将配置文件中对应的值和HttpEncodingProperties绑定起来；并把HttpEncodingProperties加入到IOC容器中。
    c. @ConditionalOnWebApplication(type=Type.SERVLET) //ConditionalOn说明满足一个条件： 在满足一个WebApplication的条件下，也就是说如果是一个Web的应用程序，则这个属性是开启的。如果当前的应用程序不是Web,那就没有必要用到这个属性。
        --> Spring底层@Conditianl注解（Spring注解版），根据不同的条件，如果满足指定的条件，整个配置类里面的配置就会生效；判断当前应该应用是否Web应用，如果是，当前配置类生效
    d. @ConditinalOnClass({CharacterEncodingFilter.class}) //在CharacterEncodingFilter这个过滤器类存在的时候使用这个特性。--> CharacterEncodingFilter 过滤器Bean
        -->判断当前项目中有没有这个类
    e. @ConditionalOnProperty{
            prefix="spring.http.encoding",
            value={"Enabled"}，
            matchIfMissing=true
        }
        说明在满足这些条件的时候才使用这个属性。
        //判断配置文件中是否存在某个配置 spring.http.encoding.enabled;如果不存在，判断也是成立的
        //即使我们配置文件中不配置spring.http.encoding.enabled，也是默认生效的

    @Configuration
    @EnableConfigurationProperties(HttpEncodingProperties.class)
    @ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)
    @ConditionalOnClass(CharacterEncodingFilter.class)
    @ConditionalOnProperty(prefix = "spring.http.encoding", value = "enabled", matchIfMissing = true)
    public class HttpEncodingAutoConfiguration {
        //他已经和Springboot的配置文件映射了
    	private final HttpEncodingProperties properties;
        //只有一个有参构造器的情况下，参数的值就会从容器中拿
    	public HttpEncodingAutoConfiguration(HttpEncodingProperties properties) {
    		this.properties = properties;
    	}

    	@Bean  //给容器中添加一个组件，这个组件的某些值需要从properties中获取
    	@ConditionalOnMissingBean  //判断容器没有这个组件
    	public CharacterEncodingFilter characterEncodingFilter() {
    		CharacterEncodingFilter filter = new OrderedCharacterEncodingFilter();
    		filter.setEncoding(this.properties.getCharset().name());
    		filter.setForceRequestEncoding(this.properties.shouldForce(Type.REQUEST));
    		filter.setForceResponseEncoding(this.properties.shouldForce(Type.RESPONSE));
    		return filter;
    	}

    总结：
        1) Springboot 启动会加载大量的自动配置类
        2）我们看我们需要的功能有你没有Springboot默认写好的自动配置类
        3）再看这个自动配置类中到底配置了哪些组件；（只要我们要用的组件有，我们就不需要再配置了）
        4）给容器中自动配置类添加组建的时候，会从properties类种获取某些属性。我们就可以在配置中指定这些属性的值
            xxxxAutoConfiguration 为自动配置类， 给容器中添加组件
        5）可以通过更改配置文件debug=true查看哪些自动配置类使用在当前应用。--也可以打断点的方式查看

##############################################
Web开发
##############################################
17 springboot之web静态资源访问规则
    1). src/resources/static文件夹相当于 Spring MVC中的webApp。 里面一般存放css，images，.html文件。
        静态资源访问如：http://localhost:8081/tx/index.html
                    http://localhost:8081/tx/images/timg.jpg
                    http://localhost:8081/tx/css/login.css
    2)./**"访问当前项目的任何资源，都去静态资源文件夹找映射：
        classpath:/META-INF/resources/
        classpath:resources/
        classpath:static/   -->推荐使用static存放静态资源
        classpath:src/resources/public 文件夹也可以
    3) 所有/webjars/**,都去classpath:/META-INT/resources/webjars/ 找资源。跟常规html里面添加js/jQuery文件引用效果一样：<script src=""></script>
        webjars: 以jar包的方式引入静态资源； http://www.webjars.org/  --> 通过Maven添加依赖到pom.xml文件中
        如添加jquery webjars：
            a. <dependency>
                   <groupId>org.webjars</groupId>
                   <artifactId>jquery</artifactId>
                   <version>3.3.1-1</version>
               </dependency>
            b.resources之前的文件目录就是classpath, 访问jquery：http://localhost:8081/tx/webjars/jquery/3.3.1-1/jquery.js
              jquery的完整路径为： C:\Users\Administrator\.m2\repository\org\webjars\jquery\3.3.1-1\jquery-3.3.1-1.jar!\META-INF\resources\webjars\jquery\3.3.1-1\jquery.js

    4）WebMvcAutoConfiguration.class WebMvc自动配置类分析为何webjars能生效：

##############################################
18 thymeleaf模板加载流程
    模板有很多种：JSP，Velocity，Freemarker，Thymeleaf。。。
    Springboot推荐使用Thymeleaf： 语法更简单，功能更强大。
    https://www.thymeleaf.org

    1）使用thymeleaf：
        a. 在pom.xml文件中引入：
            <dependency>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-thymeleaf</artifactId>
            </dependency>
        b. ThymeleafAutoConfiguration.class分析：
            默认的前缀prefix="classpath:/templates/"
            默认的后缀suffix=".html"
            默认的模式mode="HTML"  --Thymeleaf支持6中模式
            当然前缀后缀等属性可以通过配置文件进行更改，但是一般不建议更改。
        c. resources/templates 文件夹里面的内容是受保护的，不能直接访问，类似于之前web项目中的web info是一样的。
        d. 创建TemplateController使用模板。
        e. 访问模板： http://localhost:8081/tx/toLogin

##############################################
Springboot整合springmvc：+ 扩展springmvc
Note: /tx disabled
----------------------------------------------
22 springboot自动管理springmvc组件上
23 springboot自动管理springmvc组件下
24 25 26 springboot扩展springmvc

    Springmvc的自动解管理：
        中央转发器
        控制器
        视图解析器
        静态资源访问
        消息转换器
        格式化
        静态资源管理

    1）中央转发器
        中央转发器被Springboot自动接管，不在需要我们在web.xml中配置，我们闲杂的项目也不是web项目，也不存在web.xml.
        WebMvcAutoConfiguration
        org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration
    2）控制器
        控制器Controller在springboot的注解扫描范围内自动管理。--》TestControllder.class --> hello()
    3）视图解析器
        包括ContextNegotiatingViewResolver和BeanNameViewResolver beans，曾经的配置文件无需再配置
        WebMvcAutoConfiguration--> WebMvcAutoConfigurationAdapter --> defaultViewResolver()方法，默认视图解析器
        ContextNegotiatingViewResolver.class -- initServletContext 收集所有的视图解析器

        如果我们用thymeleaf的话，thymeleaf可以收集视图。

        当做文件上传的时候我们也会发现multipartResolver是自动被配置好的页面。
    4) 消息转换器
        WebMvcAutoConfiguration.class --> configureMessgageConverters 方法
            public PersonJson getJson(){
            //返回一个json： {"name":"HelloPersonJson","age":18,"birth":"2018-12-18T13:56:19.991+0000"}
            //这就是消息转换器的作用--可以扩展
    5）格式转换器
        跟消息转换器类似。 addFormatters方法

##############################################
27 springboot内嵌WEB服务器加载原理- no code
28 springboot注册web三大组件[Servlet,Filter,Listener] --自我实现注册 --Tomcat的内置配置

##############################################
29 springboot集成外部Tomcat配置

    1）必须新建一个war Packaging项目；（目前还没创建）
    2）将嵌入式的Tomcat指定为provided：
        <dependency>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-tomcat</artifactId>
                    <scope>provided</scope>
        </dependency>
    3) 配置项目的目录结构
        Project Structure --> Modules --> Web
           a> --> Web Resource Directory Path --> OK --> YES 创建一个webapp
           b> 添加Deployment Descriptions --> 创建 web.xml （目录结构：\src\main\webapp\WEB-INF\web.xml）
    4) 配置、部署Tomcat -IDEA 环境
        a. Edit Configuration --> + --> Tomcat Server/Local
            Server tab: Name/Application server 就是Tomcat Home /port
            Deployment tab: + --> Artifact --> 选择 war exploded

            以上配置完成后，可以从Application Servers 启动。
            测试：新建一个jsp项目 （在webapp目录下创建success.jsp），启动之后，访问jsp

##############################################
30 springboot外置服务器启动原理

    1) jsp项目配置前缀后缀。
        spring.mvc.view.prefix=/WEB-INF/jsp/
        spring.mvc.view.suffix=.jsp
    2) 创建一个Controller
        @Controller
        public class MyController(){
            @RequestMapping("hellosuccess")
            public String hello(){
                return "success";  //跳转到success.jsp
            }

            @RequestMapping("helloModel")
                        public String hello(Model model){
                            model.addAttribute("jspmodel","hello success");
                            return "success";  //跳转到success.jsp
                        }
        }
    3) 之前（内置Tomcat服务器的时候）是通过SpringBoot应用启动的时候initiate Tomcat服务器。
       现在（配置的Tomcat服务器的时候）反过来了， 先启动服务器，然后在带动启动springboot应用程序。-->可以从控制台看的出来

##############################################
***** springboot数据层开发 ******************
##############################################
31 springboot数据源配置和自动管理
    DataSourceAutoConfiguration.class
    DataSourcePoolMetadataProvidersConfiguration.class--> HikariPoolDataSourceMetadataProviderConfiguration

    在默认情况下，数据库连接可以使用DataSource池进行自动配置。
        如果Hikari可用，Springboot将使用它
        如果Commons DBCP2 可用，我将使用它。
        我们也可以指定数据源配置，通过type来选取使用哪种数据源。
        spring:
          datasource:
            username: root
            password: root
            url: jdbc:mysql://localhost:3306/boot_demo
            driver-class-name: com.mysql.jdbc.Driver
            type: com.zaxxer.hikari.HikariDataSource

##############################################
32 springboot整合阿里Druid数据源
    1）添加依赖
    2）配置druid 参数 （这里是.yaml）
    3）创建数据源注册类
    4) System.out.println(dataSource);  //测试DruidDataSource

    配置Druid运行期监控（运维）：
        1）注册一个Servlet
        2）配置一个web监控的filter
        打开监控页面：http://localhost:8081/druid

##############################################

